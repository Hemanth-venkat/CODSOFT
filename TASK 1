import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os

TASK_FILE = "tasks.json"

# ---------------------------
# Load and Save Functions
# ---------------------------
def load_tasks():
    if os.path.exists(TASK_FILE):
        with open(TASK_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []
    return []

def save_tasks(tasks):
    with open(TASK_FILE, "w") as f:
        json.dump(tasks, f, indent=4)

# ---------------------------
# GUI Application
# ---------------------------
class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üìù To-Do List App")
        self.root.geometry("400x500")
        self.root.config(bg="#f0f0f0")

        self.tasks = load_tasks()

        # Search Bar
        self.search_var = tk.StringVar()
        search_frame = tk.Frame(root, bg="#f0f0f0")
        search_frame.pack(pady=5)
        tk.Entry(search_frame, textvariable=self.search_var, width=25).pack(side=tk.LEFT, padx=5)
        tk.Button(search_frame, text="üîç Search", command=self.search_task).pack(side=tk.LEFT)

        # Task Listbox
        self.listbox = tk.Listbox(root, width=40, height=15, selectmode=tk.SINGLE)
        self.listbox.pack(pady=10)

        # Buttons
        tk.Button(root, text="‚ûï Add Task", command=self.add_task, width=20).pack(pady=5)
        tk.Button(root, text="‚úÖ Mark as Done", command=self.mark_done, width=20).pack(pady=5)
        tk.Button(root, text="‚ùå Delete Task", command=self.delete_task, width=20).pack(pady=5)
        tk.Button(root, text="üîÑ Show All", command=self.show_tasks, width=20).pack(pady=5)

        self.show_tasks()

    # ---------------------------
    # Functions
    # ---------------------------
    def show_tasks(self):
        self.listbox.delete(0, tk.END)
        if not self.tasks:
            self.listbox.insert(tk.END, "No tasks available.")
        else:
            for task in self.tasks:
                status = "‚úÖ" if task["done"] else "‚ùå"
                self.listbox.insert(tk.END, f"{task['title']} {status}")

    def add_task(self):
        title = simpledialog.askstring("Add Task", "Enter task name:")
        if title:
            self.tasks.append({"title": title, "done": False})
            save_tasks(self.tasks)
            self.show_tasks()

    def mark_done(self):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
            if "No tasks available." not in self.listbox.get(index):
                self.tasks[index]["done"] = True
                save_tasks(self.tasks)
                self.show_tasks()
        else:
            messagebox.showwarning("Warning", "Please select a task to mark as done!")

    def delete_task(self):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
            if "No tasks available." not in self.listbox.get(index):
                self.tasks.pop(index)
                save_tasks(self.tasks)
                self.show_tasks()
        else:
            messagebox.showwarning("Warning", "Please select a task to delete!")

    def search_task(self):
        query = self.search_var.get().lower().strip()
        self.listbox.delete(0, tk.END)
        results = [task for task in self.tasks if query in task["title"].lower()]

        if results:
            for task in results:
                status = "‚úÖ" if task["done"] else "‚ùå"
                self.listbox.insert(tk.END, f"{task['title']} {status}")
        else:
            self.listbox.insert(tk.END, "No matching tasks found.")

# ---------------------------
# Run Program
# ---------------------------
if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoApp(root)
    root.mainloop()
